import pandas as pd
import numpy as np
from scipy.stats import skew, kurtosis

# 模拟数据加载，实际应用中请替换为您的DataFrame
# df = pd.read_csv('path_to_your_file.csv')

# 假设df是您的DataFrame
# 这里，我们将'data'列转换为datetime类型（如果它还不是）
df['time'] = pd.to_datetime(df['time'])

# 计算对数收益率
df['log_return'] = np.log(df['close'] / df['close'].shift(1))

# 为了计算日收益率和其他日内统计指标，我们假设数据是按日期和时间排序的
# 如果不是，你需要先对数据进行排序
df = df.sort_values(by=['time'])

# 分组计算每日统计数据
daily_stats = df.groupby(df['time'].dt.date).agg({
    'log_return': ['mean', 'std', skew, kurtosis],
    'volume': ['mean', 'std', skew, kurtosis]
})

# 将多级列展平
daily_stats.columns = ['_'.join(col).strip() for col in daily_stats.columns.values]

# 添加量价相关系数
daily_stats['price_volume_corr'] = df.groupby(df['time'].dt.date).apply(
    lambda x: x['log_return'].corr(x['volume'])
)

# 计算OBV
df['obv'] = (np.sign(df['log_return']) * df['volume']).cumsum()

# 添加到日统计数据中
daily_stats['obv'] = df.groupby(df['time'].dt.date)['obv'].last()

# 计算VWAP
df['vwap'] = (df['volume'] * df['close']).cumsum() / df['volume'].cumsum()

# 添加到日统计数据中
daily_stats['vwap'] = df.groupby(df['time'].dt.date)['vwap'].last()

# 重新设置索引，如果你需要日期作为一列
daily_stats = daily_stats.reset_index()

# 显示结果
print(daily_stats)
